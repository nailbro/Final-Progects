import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";

const API_URL = "http://localhost:5000/feedbacksDB";

// 1. Define the Product type/interface
interface Product {
  id: number; //  Or string, adjust as needed
  [key: string]: any; // Allow other product properties
}

// 2. Define the initial state more explicitly typed
interface ProductsState {
  products: Product[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
}

const initialState: ProductsState = {
  products: [],
  status: "idle",
};

// 3.  Type the fetchProducts async thunk
export const fetchProducts = createAsyncThunk(
  "products/fetchProducts",
  async () => {
    const response = await axios.get<Product[]>(API_URL); //  Specify the type of response.data
    return response.data;
  }
);

// 4. Type the addProduct async thunk.  Use Omit if ID is generated by the server
export const addProduct = createAsyncThunk<Product, Omit<Product, 'id'>>(
  "products/addProduct",
  async (product) => {
    const response = await axios.post<Product>(API_URL, product); //  Specify the type of response.data
    return response.data;
  }
);

export const productsSlice = createSlice({
  name: "productsSlice",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action: PayloadAction<Product[]>) => { // 5.  Use PayloadAction
        state.status = "succeeded";
        state.products = action.payload;
      })
      .addCase(fetchProducts.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(addProduct.fulfilled, (state, action: PayloadAction<Product>) => { // 6.  Use PayloadAction
        state.products.push(action.payload);
      });
  },
});

export default productsSlice.reducer;
